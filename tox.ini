[tox]
skipsdist=True
requires = tox-conda
envlist =
        # test
        py3{8, 9, 10}-tests


[base]
package_name = thermoextrap
import_name = thermoextrap

conda_env =
    environment.yaml
conda_env_dev =
    environment-dev.yaml
conda_deps_test =
    pandas
    pytest

# use this to keep pymbar from updating
conda_spec =
    conda-spec.txt

conda_channels =
    conda-forge
    wpk-nist

conda_deps_docs =
    sphinx
    sphinx_rtd_theme
    nbsphinx
    ipython
    setuptools-scm
    sphinxcontrib-spelling

conda_deps_dist_pypi =
    setuptools
    setuptools-scm
    twine
    setuptools_scm_git_archive
    build

conda_deps_dist_conda =
    anaconda-client
    grayskull
    conda-build
    conda-verify
    boa
    setuptools-scm


allowlist_externals =
    bash
    open
    cat
    rm
    echo
    mkdir
    make

commands_test_check =
    python --version
    python -c 'import {[base]import_name}; print( {[base]import_name}.__version__)'
    bash -ec 'echo $PWD'
    echo posargs {posargs}


[testenv]
usedevelop =
    tests: True
conda_env =
    tests: {[base]conda_env}
conda_spec =
    {[base]conda_spec}
conda_deps =
    tests: {[base]conda_deps_test}
allowlist_externals =
    {[base]allowlist_externals}
commands =
    {[base]commands_test_check}
    pytest {posargs}



[testenv:docs-{build, release, clean, command, spelling}]
basepython=python3.10
description =
    build: build documentation.
    release: create documentation branch.
    clean: clean build.
    spelling: run spell checking on documentation and docstrings.
    command: run arbitrary command
envdir={toxworkdir}/docs
usedevelop = True
conda_env = {[base]conda_env}
conda_deps =
    {[base]conda_deps_docs}
    ghp-import
deps=
    # use pip to install this.  Conda want to install a bunch of extra stuff
    pyenchant
allowlist_externals =
    {[base]allowlist_externals}
changedir={toxinidir}/docs

commands =
    build: bash -c "echo $PWD"
    build: make {posargs:html}
    # build: bash -c 'rm -rf {toxworkdir}/docs-dist/*'
    # build: sphinx-build  --color -b html -d "{toxinidir}/docs/_build/doctrees" "{toxinidir}/docs"  "{toxworkdir}/docs/_build/html"
    build: open {toxinidir}/docs/_build/html/index.html
    release: ghp-import -n {posargs:-m 'update docs'} -b nist-pages {toxinidir}/docs/_build/html
    clean: make clean
    clean: rm -rf generated/*
    spelling: sphinx-build -b spelling . _build
    command: {posargs}


# create pypi dist
[testenv:dist-pypi-{build, testrelease, release}]
basepython=python3.11
description =
    build: build distribution.
    testrelease: upload to testpypi
    release: upload to pypi
envdir={toxworkdir}/dist-pypi-env
skip_install=True
conda_deps =
    {[base]conda_deps_dist_pypi}
allowlist_externals =
    {[base]allowlist_externals}
changedir = {toxinidir}
commands =
    build: rm -rf {toxinidir}/dist
    build: python -m build --outdir "{toxinidir}/dist/"

    testrelease: twine upload --repository testpypi {toxinidir}/dist/*
    release: twine upload {toxinidir}/dist/*

# create conda dist
[testenv:dist-conda-{recipe, build, command}]
description =
    recipe: build conda recipe using grayskull
    build: build conda distribution
    command: run arbitrary command

envdir={toxworkdir}/dist-conda-env
skip_install=True
conda_deps =
    {[base]conda_deps_dist_conda}

allowlist_externals =
    {[base]allowlist_externals}
changedir = {toxinidir}/dist-conda
commands =
    recipe: rm -rf {toxinidir}/dist-conda/{[base]package_name}
    recipe: grayskull pypi {[base]package_name}
    recipe: cat {[base]package_name}/meta.yaml

    build: rm -rf build
    build: mkdir -p build
    build: conda mambabuild --output-folder=build --no-anaconda-upload .
    command: {posargs:python}



# test pypi/conda install from local/remote
[testenv:test-dist-{pypi, conda}-{local,remote}-py3{8,9,10}]
skip_install = True
usedevelop = False
conda_channels =
    {[base]conda_channels}
conda_deps =
    {[base]conda_deps_test}
    conda-remote: {[base]package_name}
    conda-local: {posargs}
    conda: pymbar<4.0


deps =
    pypi-remote: {[base]package_name}[mbar,gpr]
    pypi-local: {posargs}[mbar,gpr]
    conda: tensorflow
    conda: tensorflow-probability
    conda: gpflow


allowlist_externals =
    {[base]allowlist_externals}
commands =
    {[base]commands_test_check}
    local: pytest {toxinidir}
    remote: pytest {posargs} {toxinidir}

# [testenv]
# usedevelop =
#     tests: True
# conda_env =
#     tests: {[base]conda_env}
# conda_spec = {[base]conda_spec}

# conda_deps =
#     tests: {[base]conda_deps_test}
# allowlist_externals =
#     {[base]allowlist_externals}
# commands =
#     {[base]commands_test_check}
#     pytest {posargs}




# [testenv:docs-{build, release}]
# envdir={toxworkdir}/docs
# usedevelop = True
# conda_env = {[base]conda_env}
# conda_deps =
#         {[base]conda_deps_docs}
#         ghp-import
# allowlist_externals =
#         {[base]allowlist_externals}
# changedir={toxworkdir}/docs-dist
# commands =
#          build: bash -c 'rm -rf {toxworkdir}/docs-dist/*'
#          build: sphinx-build  --color -b html -d "{toxworkdir}/docs-dist/doctrees" "{toxinidir}/docs"  "{toxworkdir}/docs-dist/html"
#          build: open {toxworkdir}/docs-dist/html/index.html
#          release: ghp-import -n {posargs:-m 'update docs'} -b nist-pages {toxworkdir}/docs-dist/html


# # create pypi dist
# [testenv:dist-pypi-{build, testrelease, release}]
# envdir={toxworkdir}/dist-pypi-env
# skip_install=True
# conda_deps =
#     {[base]conda_deps_dist_pypi}
# allowlist_externals =
#     {[base]allowlist_externals}
# changedir = {toxworkdir}/dist-pypi
# commands =
#     build: rm -rf {toxworkdir}/dist
#     build: python -m build --outdir "{toxworkdir}/dist-pypi/"

#     testrelease: twine upload --repository testpypi {toxworkdir}/dist-pypi/*
#     release: twine upload {toxworkdir}/dist/*

# # create conda dist
# [testenv:dist-conda-{recipe, build, command}]
# envdir={toxworkdir}/dist-conda-env
# skip_install=True
# conda_deps =
#     {[base]conda_deps_dist_conda}

# allowlist_externals =
#     {[base]allowlist_externals}
# changedir = {toxworkdir}/dist-conda
# commands =
#     recipe: rm -rf {toxworkdir}/dist-conda/{[base]package_name}
#     recipe: grayskull pypi {[base]package_name}
#     recipe: cat mypackage/meta.yaml

#     build: rm -rf build
#     build: mkdir -p build
#     build: conda mambabuild --output-folder=build --no-anaconda-upload .
#     command: {posargs:python}


# # test pypi/conda install from local/remote
# [testenv:test-dist-{pypi, conda}-{local,remote}-py3{8,9,10}]
# skip_install = True
# usedevelop = False
# conda_channels =
#     {[base]conda_channels}
# conda_deps =
#     {[base]conda_deps_test}
#     conda-remote: {[base]package_name}
#     conda-local: {posargs}

# deps =
#     pypi-remote: {[base]package_name}
#     pypi-local: {posargs}

# allowlist_externals =
#     {[base]allowlist_externals}
# commands =
#     {[base]commands_test_check}
#     pytest {toxinidir}
