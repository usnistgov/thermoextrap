[build-system]
requires = [
    "setuptools>=61.2",
    "setuptools_scm[toml]>=3.4",
    "setuptools_scm_git_archive",
]
build-backend = "setuptools.build_meta"


[project]
name = "thermoextrap"
authors = [{name = "Jacob Monroe", email = "jacob.monroe@nist.gov"}, {name = "William Krekelberg", email="wpk@nist.gov"}]
license = {text = '"NIST license https://www.nist.gov/director/licensing"'}
description = "Thermodynamic extrapolation"
# if using markdown
# long_description_content_type = text/markdown
keywords = ["thermo-extrap"]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "License :: Public Domain",
    "Operating System :: OS Independent",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering",
]
dynamic = ["readme", "version"]
requires-python = ">=3.8"
dependencies = [
    "numpy >= 1.20",
    "xarray >= 0.16",
    "sympy",
    "scipy",
    "cmomy >= 0.1.9",
    "custom-inherit",
    "attrs",
]


[project.urls]
homepage = "https://github.com/usnistgov/thermo-extrap"
documentation = "https://pages.nist.gov/thermo-extrap/"

[project.optional-dependencies]
accel = ["bottleneck"]
parallel = ["dask[complete]"]
viz = ["matplotlib"]
mbar = ["pymbar<4.0"]
gpr = [
    "tensorflow",
    "tensorflow-probability",
    "gpflow",
]
openmm = ["openmm"]
all = [
    "thermoextrap[mbar]",
    "thermoextrap[gpr]",
    "thermoextrap[accel]",
    "thermoextrap[parallel]",
    "thermoextrap[viz]",
]
test = [
    "pytest",
]
# dev = []
# docs = []

[tool.setuptools]
package-dir = {"" = "src"}
zip-safe = true # if using mypy, must be False
include-package-data = true
license-files = ["LICENSE"]

[tool.setuptools.packages.find]
where = ["src"]
namespaces = false

# To add package data
# [tool.setuptools.package-data]
# thermoextrap = [
#     "py.typed"
# ]


[tool.setuptools.dynamic]
readme = {file = ["README.md", "HISTORY.md", "LICENSE"], content-type = "text/markdown"}

[tool.setuptools_scm]
fallback_version = "999"

[tool.aliases]
test = "pytest"

[tool.pytest.ini_options]
addopts = "--verbose"
testpaths = ["tests"]

[tool.isort]
profile = "black"
skip_gitignore = true
known_first_party = ["thermoextrap"]


[tool.ruff]
line-length = 88
update-check = false
target-version = "py38"

select = [
  # pyflakes
  "F",
  # pycodestyle
  "E",
  "W",
  # isort
  "I",
  # pyupgrade
  "UP",
  # pydocstyle
  "D"
  # # flake8-2020
  # "YTT",
  # # flake8-bugbear
  # "B",
  # # flake8-quotes
  # "Q",
  # # pylint
  # "PLE", "PLR", "PLW",
  # # misc lints
  # "PIE",
  # # tidy imports
  # "TID",
  # # implicit string concatenation
  # "ISC",
  # # type-checking imports
  # "TCH",
]


# Allow autofix for all enabled rules (when `--fix`) is provided.
# fixable = ["A", "B", "C", "D", "E", "F", "..."]
unfixable = ["D"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs/conf.py",
    "src/thermoextrap/tests",
    "tests/",
    "src/thermoextrap/legacy/",
    "docs/notebooks/gpr/",

]


ignore = [
    # # whitespace before ':' - doesn't work well with black
    # "E203",
    # module level import not at top of file
    "E402",
    # line too long - let black worry about that
    "E501",
    # do not assign a lambda expression, use a def
    "E731",
    # # line break before binary operator
    # "W503",
    # allow black line after docstring
    "D202",
    "D105",
    "D205",
    # this leads to errors with placing titles in module
    # docstrings
    "D400",
    "D401",
    "D415",
    "D102",
    "D103",
    # these are useful, but too many errors
    # due to use of docfiller
    "D417",
    "D107",
    "D203",
    "D212",

]

per-file-ignores = {}



# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.isort]
known-first-party = ["thermoextrap"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.cruft]


[tool.mypy]
files = ["src/thermoextrap"]
show_error_codes = true
warn_unused_ignores = true
warn_return_any = true
warn_unused_configs = true
exclude = [
    ".eggs",
    ".tox",
    "doc",
    "docs",
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
       "numpy.*",
       "pandas.*",
       "pytest.*",
       "scipy.*",
       "setuptools",
]

[[tool.mypy.overrides]]
ignore_errors = true
module = []
